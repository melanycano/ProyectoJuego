package com.mygdx.gorobots.pantallas;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Box2DDebugRenderer;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.utils.viewport.FitViewport;
import com.badlogic.gdx.utils.viewport.Viewport;
import com.mygdx.gorobots.elementos.MundoBox2D;
import com.mygdx.gorobots.elementos.WorldContactListener;
import com.mygdx.gorobots.io.KeyListener;
import com.mygdx.gorobots.sprites.Robot;
import com.mygdx.gorobots.utiles.Config;
import com.mygdx.gorobots.utiles.Recursos;
import com.mygdx.gorobots.utiles.Render;

public class PantallaNivel implements Screen{
	
	//HERRAMIENTAS EXTRAS
//	ShapeRenderer sr;				//DIBUJA FORMAS GEOMETRICAS BASICAS
	SpriteBatch b;					//DIBUJAR SPRITES
	private KeyListener teclas;		//CLASE PARA LAS ENTRADA POR TECLADO
	
	//REFERENCIAS AL JUEGO, USANDO SPRITES
	private TextureAtlas atlas;		//COLECCION DE TEXTURAS EMPAQUETADAS EN UNA SOLA IMAGEN
	
	//PANTALLAS BASICAS
	private OrthographicCamera camara;
	private Viewport ventanaJuego;
	
	//VARIABLES PARA EL MAPA
	private TmxMapLoader cargaMapa; //CARGAR MAPA EN EL JUEGO
	private TiledMap mapa;				//REFERENCIA AL MAPA EN SI
	private OrthogonalTiledMapRenderer renderizador; //MOSTRAR EL MAPA

	//VARIABLES PARA EL MUNDO BOX2D
	private World mundo;
	private Box2DDebugRenderer b2dr; //NOS BRINDA LA REPRESENTACION GRAFICA DE LOS CUERPOS DENTRO DEL MUNDO
	
	//CREACION DEL MUNDO A PARTIR DE UNA CLASE
	private MundoBox2D mundoBox2D;
	
	//DECLARACIÓN DEL JUGADOR
	private Robot jugador1;
	
	

	@Override
	public void show() {
		Render.pantallaNivel = this;
	
		atlas = new TextureAtlas(Recursos.SPRITES_ROBOTS);
		
		//CREACION DE CAMARA Y CONFIGURACION DE LA VISTA 
		camara = new OrthographicCamera();
		ventanaJuego = new FitViewport(Config.ANCHO / Config.PPM, Config.ALTO / Config.PPM, camara);
		
		//CARGA DEL MAPA Y CONFIGURACION DE SU RENDERIZADO
		cargaMapa = new TmxMapLoader();
		mapa = cargaMapa.load(Recursos.MAPA_NIVEL);
		renderizador = new OrthogonalTiledMapRenderer(mapa, 1 / Config.PPM);
		
		//CONFIGURACION DEL ZOOM (PINZAAAS)
//		float zoomFactor = 0.5f;		//pinzas
//		camara.zoom = zoomFactor;		//pinzas
			
		
		// Calcular la posición para mostrar los 2/3 inferiores del mapa
//	    float mapHeight = ventanaJuego.getWorldHeight() / 1.2f;
//	    float targetY = (mapHeight * 2 / 3) / 2; // Centrar en los 2/3 inferiores
//	    camara.position.set(ventanaJuego.getWorldWidth() / 2, targetY, 0);
		
		camara.position.set(ventanaJuego.getWorldWidth() / 2, ventanaJuego.getWorldHeight() / 2, 0);
		
		
		//CONFIGURACION DEL MUNDO BOX2D
		mundo = new World(new Vector2(0, -10), true); //INVESTIGAR PARA QUE SIRVER EL VECTOR2 (PARA LA GRAVEDAD) A PROFUNDIDAD
		b2dr = new Box2DDebugRenderer();
		
		//CREACION DE LAS FIGURAS DEL MUNDO BOX2D
		mundoBox2D = new MundoBox2D(mundo, mapa);
		
		//CREACION DEL ROBOT EN EL MUNDO DEL JUEGO
		jugador1 = new Robot(mundo, Recursos.SPRITE_ROBOT_1);
		
		mundo.setContactListener(new WorldContactListener(jugador1));
		
		
		
		//INICIALIZO TECLAS Y LO ASIGNO COMO EL OBJETO QUE RECIBIRA TODAS LAS ENTRADAS
		teclas = new KeyListener(this);
		Gdx.input.setInputProcessor(teclas);
		
		//INICIALIZACION DE LAS HERRAMIENTAS EXTRAS
		b = Render.sb;
		
		
	}
	
	public TextureAtlas getAtlas() {
		return atlas;
	}
	
	@Override
	public void render(float delta) {
	
		update(delta);
		Render.LimpiarPantalla();
		renderizador.render();
		
		//RENDER DEL BOX2D
		b2dr.render(mundo, camara.combined);
		
		b.setProjectionMatrix(camara.combined);
		b.begin();
			jugador1.draw(b);
		b.end();
	
		
	}
	
	public void update(float dt) {
		
		manejarEntrada(dt);
		mundo.step(1/60f, 6, 2);			//investigar temas de velocidad y tiempos
		
		jugador1.update(dt);
		camara.position.x = jugador1.cuerpo.getPosition().x;
		
		camara.update();
		renderizador.setView(camara);
		
	}

	private void manejarEntrada(float dt) {

		if(Gdx.input.isKeyJustPressed(Input.Keys.UP)) {
//		if(teclas.isArriba()) {
			jugador1.cuerpo.applyLinearImpulse(new Vector2(0, 4f), jugador1.cuerpo.getWorldCenter(), true);
		}
		
		if(teclas.isDerecha()) {
			jugador1.cuerpo.applyLinearImpulse(new Vector2(0.07f,0), jugador1.cuerpo.getWorldCenter(), true);
		}
		
		if(teclas.isIzquierda() && jugador1.cuerpo.getLinearVelocity().x >= -2) {
			jugador1.cuerpo.applyLinearImpulse(new Vector2(-0.1f, 0), jugador1.cuerpo.getWorldCenter(), true);
			
		}
		
	}
	


	@Override
	public void resize(int width, int height) {
		//ACTUALIZAR EL TAMAÑO DE LA VENTANA DE JUEGO
		ventanaJuego.update(width, height);
	}

	@Override
	public void pause() {
		
	}

	@Override
	public void resume() {
		
	}

	@Override
	public void hide() {
		
	}

	@Override
	public void dispose() {
		mapa.dispose();
		renderizador.dispose();
		mundo.dispose();
		b2dr.dispose();
		
		
	}

}
